
BEGIN_LCDTFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d20  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000ecc  08000ecc  00001ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ee4  08000ee4  00002058  2**0
                  CONTENTS
  4 .ARM          00000000  08000ee4  08000ee4  00002058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ee4  08000ee4  00002058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ee4  08000ee4  00001ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ee8  08000ee8  00001ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08000eec  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002058  2**0
                  CONTENTS
 10 .bss          0000001c  20000058  20000058  00002058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00002058  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bda  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000350  00000000  00000000  00002c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00002fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000089  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a268  00000000  00000000  000030f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f75  00000000  00000000  0001d361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090c59  00000000  00000000  0001e2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aef2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  000aef74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  000af1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000058 	.word	0x20000058
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000eb4 	.word	0x08000eb4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000005c 	.word	0x2000005c
 80001e8:	08000eb4 	.word	0x08000eb4

080001ec <BSP_LCD_Init>:
	#define MADCTL_RGB 0x00 ///< Red-Green-Blue pixel order
	#define MADCTL_BGR 0x08 ///< Blue-Green-Red pixel order
	#define MADCTL_MH 0x04  ///< LCD refresh right to left

void BSP_LCD_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	LCD_Pin_Init();
 80001f0:	f000 f80a 	bl	8000208 <LCD_Pin_Init>
	LCD_SPI_Init();
 80001f4:	f000 f90e 	bl	8000414 <LCD_SPI_Init>
	LCD_SPI_Enable();
 80001f8:	f000 f8fa 	bl	80003f0 <LCD_SPI_Enable>
	LCD_Reset();
 80001fc:	f000 f984 	bl	8000508 <LCD_Reset>
	LCD_Config();
 8000200:	f000 f9b0 	bl	8000564 <LCD_Config>

}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}

08000208 <LCD_Pin_Init>:
void LCD_Pin_Init(void)
{
 8000208:	b480      	push	{r7}
 800020a:	b087      	sub	sp, #28
 800020c:	af00      	add	r7, sp, #0
	RCC_TypeDef* pRCC = RCC;
 800020e:	4b73      	ldr	r3, [pc, #460]	@ (80003dc <LCD_Pin_Init+0x1d4>)
 8000210:	617b      	str	r3, [r7, #20]
	GPIO_TypeDef* pGPIOA = GPIOA;
 8000212:	4b73      	ldr	r3, [pc, #460]	@ (80003e0 <LCD_Pin_Init+0x1d8>)
 8000214:	613b      	str	r3, [r7, #16]
	GPIO_TypeDef* pGPIOC = GPIOC;
 8000216:	4b73      	ldr	r3, [pc, #460]	@ (80003e4 <LCD_Pin_Init+0x1dc>)
 8000218:	60fb      	str	r3, [r7, #12]
	GPIO_TypeDef* pGPIOD = GPIOD;
 800021a:	4b73      	ldr	r3, [pc, #460]	@ (80003e8 <LCD_Pin_Init+0x1e0>)
 800021c:	60bb      	str	r3, [r7, #8]
	GPIO_TypeDef* pGPIOF = GPIOF;
 800021e:	4b73      	ldr	r3, [pc, #460]	@ (80003ec <LCD_Pin_Init+0x1e4>)
 8000220:	607b      	str	r3, [r7, #4]
	//Enable clock for GPIOA,C,D,F perpiherals
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN_Pos);
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000226:	f043 0201 	orr.w	r2, r3, #1
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	631a      	str	r2, [r3, #48]	@ 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOCEN_Pos);
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	f043 0204 	orr.w	r2, r3, #4
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	631a      	str	r2, [r3, #48]	@ 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIODEN_Pos);
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	f043 0208 	orr.w	r2, r3, #8
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	631a      	str	r2, [r3, #48]	@ 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOFEN_Pos);
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	f043 0220 	orr.w	r2, r3, #32
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	631a      	str	r2, [r3, #48]	@ 0x30
	//REX
	REG_SET_VAL(pGPIOA->MODER,0x1U,0x3,(LCD_RESX_PIN*2U));//MODE
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOA->OTYPER,LCD_RESX_PIN); //Output Type
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOA->OSPEEDR,2U,0x3U,(LCD_RESX_PIN*2U));//Speed
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	609a      	str	r2, [r3, #8]
	//CSX
	REG_SET_VAL(pGPIOC->MODER,0x1U,0x3,(LCD_CSX_PIN*2U));//MODE
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0210 	orr.w	r2, r3, #16
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOC->OTYPER,LCD_CSX_PIN); //Output Type
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f023 0204 	bic.w	r2, r3, #4
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOC->OSPEEDR,2U,0x3U,(LCD_CSX_PIN*2U));//Speed
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	f043 0220 	orr.w	r2, r3, #32
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	609a      	str	r2, [r3, #8]
	//D/CX
	REG_SET_VAL(pGPIOD->MODER,0x1U,0x3,(LCD_DCX_PIN*2U));//MODE
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOD->OTYPER,LCD_DCX_PIN); //Output Type
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOD->OSPEEDR,2U,0x3U,(LCD_DCX_PIN*2U));//Speed
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	609a      	str	r2, [r3, #8]
	//SPI_CLK(PF7)
	REG_SET_VAL(pGPIOF->MODER,2U,0x3U,(LCD_SCL_PIN*2U));//MODE
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOF->OTYPER,LCD_SCL_PIN); //Output Type
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOF->OSPEEDR,2U,0x3U,(LCD_SCL_PIN*2U));//Speed
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pGPIOF->AFR[0],5U,0xFU,(LCD_SCL_PIN*4U));
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6a1b      	ldr	r3, [r3, #32]
 8000346:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	621a      	str	r2, [r3, #32]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6a1b      	ldr	r3, [r3, #32]
 8000352:	f043 42a0 	orr.w	r2, r3, #1342177280	@ 0x50000000
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	621a      	str	r2, [r3, #32]
	//SPI_SDA(PF9)
	REG_SET_VAL(pGPIOF->MODER,2U,0x3U,(LCD_SDA_PIN*2U));//MODE
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOF->OTYPER,LCD_SDA_PIN); //Output Type
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOF->OSPEEDR,2U,0x3U,(LCD_SDA_PIN*2U));//Speed
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pGPIOF->AFR[1],5U,0xFU,((LCD_SDA_PIN%8)*4U));
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800039a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	f043 0250 	orr.w	r2, r3, #80	@ 0x50
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	625a      	str	r2, [r3, #36]	@ 0x24

	//CSX = HIGH
	REG_SET_BIT(pGPIOC->ODR,LCD_CSX_PIN);
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f043 0204 	orr.w	r2, r3, #4
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	615a      	str	r2, [r3, #20]
	//RESX = HIGH
	REG_SET_BIT(pGPIOA->ODR,LCD_RESX_PIN);
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	615a      	str	r2, [r3, #20]
	//DCX = HIGH
	REG_SET_BIT(pGPIOD->ODR,LCD_DCX_PIN);
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	615a      	str	r2, [r3, #20]

}
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020000 	.word	0x40020000
 80003e4:	40020800 	.word	0x40020800
 80003e8:	40020c00 	.word	0x40020c00
 80003ec:	40021400 	.word	0x40021400

080003f0 <LCD_SPI_Enable>:
void LCD_SPI_Enable(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
	SPI_TypeDef* pSPI = SPI;
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <LCD_SPI_Enable+0x20>)
 80003f8:	607b      	str	r3, [r7, #4]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SPE_Pos);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40015000 	.word	0x40015000

08000414 <LCD_SPI_Init>:
void LCD_SPI_Init(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
	SPI_TypeDef* pSPI = SPI;
 800041a:	4b2e      	ldr	r3, [pc, #184]	@ (80004d4 <LCD_SPI_Init+0xc0>)
 800041c:	607b      	str	r3, [r7, #4]
	RCC_TypeDef* pRCC = RCC;
 800041e:	4b2e      	ldr	r3, [pc, #184]	@ (80004d8 <LCD_SPI_Init+0xc4>)
 8000420:	603b      	str	r3, [r7, #0]
	REG_SET_BIT(pRCC->APB2ENR,RCC_APB2ENR_SPI5EN_Pos);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000426:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	645a      	str	r2, [r3, #68]	@ 0x44
	REG_SET_BIT(pSPI->CR1,SPI_CR1_MSTR_Pos); //Controler Mode
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f043 0204 	orr.w	r2, r3, #4
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIMODE_Pos); //BIDIMODE Enable
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIOE_Pos); //Turn on Tx to transmit
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIOE_Pos); //Turn on Tx to transmit
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_DFF_Pos); //Frame = 8bits
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSM_Pos); //Manage as Sotfware
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSI_Pos); //Manage as Sotfware about detail
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_LSBFIRST_Pos); //MSB send that first
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	601a      	str	r2, [r3, #0]
	REG_SET_VAL(pSPI->CR1,0x3U,0x7U,SPI_CR1_BR_Pos); //SPICLK = 90/16=5MHz <6MHz fit as require of ILI9341
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f043 0218 	orr.w	r2, r3, #24
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPOL_Pos); //CPOL=0
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f023 0202 	bic.w	r2, r3, #2
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPHA_Pos); //CPHA=0
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f023 0201 	bic.w	r2, r3, #1
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR2,SPI_CR2_FRF_Pos); //SPI Motorola frame format
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	f023 0210 	bic.w	r2, r3, #16
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	605a      	str	r2, [r3, #4]

}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40015000 	.word	0x40015000
 80004d8:	40023800 	.word	0x40023800

080004dc <delay_50ms>:
void delay_50ms(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<0xFFFFU*10U;i++);
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e002      	b.n	80004ee <delay_50ms+0x12>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3301      	adds	r3, #1
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <delay_50ms+0x28>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d9f8      	bls.n	80004e8 <delay_50ms+0xc>
}
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	0009fff5 	.word	0x0009fff5

08000508 <LCD_Reset>:
void LCD_Reset(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
	LCD_RESX_LOW();
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <LCD_Reset+0x54>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a12      	ldr	r2, [pc, #72]	@ (800055c <LCD_Reset+0x54>)
 8000514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000518:	6153      	str	r3, [r2, #20]
	for(uint32_t i=0; i<0xFFFFU*20U;i++);//50ms for delay
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	e002      	b.n	8000526 <LCD_Reset+0x1e>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3301      	adds	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a0d      	ldr	r2, [pc, #52]	@ (8000560 <LCD_Reset+0x58>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d9f8      	bls.n	8000520 <LCD_Reset+0x18>
	LCD_RESX_HIGH();
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <LCD_Reset+0x54>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <LCD_Reset+0x54>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000538:	6153      	str	r3, [r2, #20]
	for(uint32_t i=0; i<0xFFFFU*20U;i++);//50ms for delay
 800053a:	2300      	movs	r3, #0
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	e002      	b.n	8000546 <LCD_Reset+0x3e>
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <LCD_Reset+0x58>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d9f8      	bls.n	8000540 <LCD_Reset+0x38>
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40020000 	.word	0x40020000
 8000560:	0013ffeb 	.word	0x0013ffeb

08000564 <LCD_Config>:
void LCD_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
	uint8_t params[15];
	LCD_Write_Cmd(ILI9341_SWRESET);
 800056a:	2001      	movs	r0, #1
 800056c:	f000 f952 	bl	8000814 <LCD_Write_Cmd>
	LCD_Write_Cmd(ILI9341_POWERB);
 8000570:	20cf      	movs	r0, #207	@ 0xcf
 8000572:	f000 f94f 	bl	8000814 <LCD_Write_Cmd>
	params[0] = 0x00;
 8000576:	2300      	movs	r3, #0
 8000578:	703b      	strb	r3, [r7, #0]
	params[1] = 0xD9;
 800057a:	23d9      	movs	r3, #217	@ 0xd9
 800057c:	707b      	strb	r3, [r7, #1]
	params[2] = 0x30;
 800057e:	2330      	movs	r3, #48	@ 0x30
 8000580:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 8000582:	463b      	mov	r3, r7
 8000584:	2103      	movs	r1, #3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f986 	bl	8000898 <LCD_Write_Data>
	LCD_Write_Cmd(ILI9341_POWER_SEQ);
 800058c:	20ed      	movs	r0, #237	@ 0xed
 800058e:	f000 f941 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x64;
 8000592:	2364      	movs	r3, #100	@ 0x64
 8000594:	703b      	strb	r3, [r7, #0]
	params[1]= 0x03;
 8000596:	2303      	movs	r3, #3
 8000598:	707b      	strb	r3, [r7, #1]
	params[2]= 0X12;
 800059a:	2312      	movs	r3, #18
 800059c:	70bb      	strb	r3, [r7, #2]
	params[3]= 0X81;
 800059e:	2381      	movs	r3, #129	@ 0x81
 80005a0:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 80005a2:	463b      	mov	r3, r7
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f976 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DTCA);
 80005ac:	20e8      	movs	r0, #232	@ 0xe8
 80005ae:	f000 f931 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x85;
 80005b2:	2385      	movs	r3, #133	@ 0x85
 80005b4:	703b      	strb	r3, [r7, #0]
	params[1]= 0x10;
 80005b6:	2310      	movs	r3, #16
 80005b8:	707b      	strb	r3, [r7, #1]
	params[2]= 0x7A;
 80005ba:	237a      	movs	r3, #122	@ 0x7a
 80005bc:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 80005be:	463b      	mov	r3, r7
 80005c0:	2103      	movs	r1, #3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f968 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWERA);
 80005c8:	20cb      	movs	r0, #203	@ 0xcb
 80005ca:	f000 f923 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x39;
 80005ce:	2339      	movs	r3, #57	@ 0x39
 80005d0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x2C;
 80005d2:	232c      	movs	r3, #44	@ 0x2c
 80005d4:	707b      	strb	r3, [r7, #1]
	params[2]= 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x34;
 80005da:	2334      	movs	r3, #52	@ 0x34
 80005dc:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x02;
 80005de:	2302      	movs	r3, #2
 80005e0:	713b      	strb	r3, [r7, #4]
	LCD_Write_Data(params, 5);
 80005e2:	463b      	mov	r3, r7
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f956 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PRC);
 80005ec:	20f7      	movs	r0, #247	@ 0xf7
 80005ee:	f000 f911 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x20;
 80005f2:	2320      	movs	r3, #32
 80005f4:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f94c 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DTCB);
 8000600:	20ea      	movs	r0, #234	@ 0xea
 8000602:	f000 f907 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 800060e:	463b      	mov	r3, r7
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f940 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWER1);
 8000618:	20c0      	movs	r0, #192	@ 0xc0
 800061a:	f000 f8fb 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x1B;
 800061e:	231b      	movs	r3, #27
 8000620:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000622:	463b      	mov	r3, r7
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f936 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_POWER2);
 800062c:	20c1      	movs	r0, #193	@ 0xc1
 800062e:	f000 f8f1 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x12;
 8000632:	2312      	movs	r3, #18
 8000634:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000636:	463b      	mov	r3, r7
 8000638:	2101      	movs	r1, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f92c 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_VCOM1);
 8000640:	20c5      	movs	r0, #197	@ 0xc5
 8000642:	f000 f8e7 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x08;
 8000646:	2308      	movs	r3, #8
 8000648:	703b      	strb	r3, [r7, #0]
	params[1]= 0x26;
 800064a:	2326      	movs	r3, #38	@ 0x26
 800064c:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 800064e:	463b      	mov	r3, r7
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f920 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_VCOM2);
 8000658:	20c7      	movs	r0, #199	@ 0xc7
 800065a:	f000 f8db 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0XB7;
 800065e:	23b7      	movs	r3, #183	@ 0xb7
 8000660:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000662:	463b      	mov	r3, r7
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f916 	bl	8000898 <LCD_Write_Data>

	uint8_t m;
	m = MADCTL_MV | MADCTL_MY| MADCTL_BGR;
 800066c:	23a8      	movs	r3, #168	@ 0xa8
 800066e:	73fb      	strb	r3, [r7, #15]

	LCD_Write_Cmd(ILI9341_MAC);    // Memory Access Control <Landscape setting>
 8000670:	2036      	movs	r0, #54	@ 0x36
 8000672:	f000 f8cf 	bl	8000814 <LCD_Write_Cmd>
	params[0]= m;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 800067a:	463b      	mov	r3, r7
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f90a 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PIXEL_FORMAT);
 8000684:	203a      	movs	r0, #58	@ 0x3a
 8000686:	f000 f8c5 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x55; //select RGB565
 800068a:	2355      	movs	r3, #85	@ 0x55
 800068c:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 800068e:	463b      	mov	r3, r7
 8000690:	2101      	movs	r1, #1
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f900 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_FRMCTR1);
 8000698:	20b1      	movs	r0, #177	@ 0xb1
 800069a:	f000 f8bb 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1B;//frame rate = 70
 80006a2:	231b      	movs	r3, #27
 80006a4:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 80006a6:	463b      	mov	r3, r7
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f8f4 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_DFC);    // Display Function Control
 80006b0:	20b6      	movs	r0, #182	@ 0xb6
 80006b2:	f000 f8af 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x0A;
 80006b6:	230a      	movs	r3, #10
 80006b8:	703b      	strb	r3, [r7, #0]
	params[1]= 0xA2;
 80006ba:	23a2      	movs	r3, #162	@ 0xa2
 80006bc:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 80006be:	463b      	mov	r3, r7
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f8e8 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_3GAMMA_EN);    // 3Gamma Function Disable
 80006c8:	20f2      	movs	r0, #242	@ 0xf2
 80006ca:	f000 f8a3 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x02;
 80006ce:	2302      	movs	r3, #2
 80006d0:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80006d2:	463b      	mov	r3, r7
 80006d4:	2101      	movs	r1, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f8de 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_GAMMA);
 80006dc:	2026      	movs	r0, #38	@ 0x26
 80006de:	f000 f899 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x01;
 80006e2:	2301      	movs	r3, #1
 80006e4:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80006e6:	463b      	mov	r3, r7
 80006e8:	2101      	movs	r1, #1
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f8d4 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_PGAMMA);    //Set Gamma
 80006f0:	20e0      	movs	r0, #224	@ 0xe0
 80006f2:	f000 f88f 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x0F;
 80006f6:	230f      	movs	r3, #15
 80006f8:	703b      	strb	r3, [r7, #0]
	params[1]= 0x1D;
 80006fa:	231d      	movs	r3, #29
 80006fc:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1A;
 80006fe:	231a      	movs	r3, #26
 8000700:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x0A;
 8000702:	230a      	movs	r3, #10
 8000704:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0D;
 8000706:	230d      	movs	r3, #13
 8000708:	713b      	strb	r3, [r7, #4]
	params[5]= 0x07;
 800070a:	2307      	movs	r3, #7
 800070c:	717b      	strb	r3, [r7, #5]
	params[6]= 0x49;
 800070e:	2349      	movs	r3, #73	@ 0x49
 8000710:	71bb      	strb	r3, [r7, #6]
	params[7]= 0X66;
 8000712:	2366      	movs	r3, #102	@ 0x66
 8000714:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x3B;
 8000716:	233b      	movs	r3, #59	@ 0x3b
 8000718:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 800071a:	2307      	movs	r3, #7
 800071c:	727b      	strb	r3, [r7, #9]
	params[10]= 0x11;
 800071e:	2311      	movs	r3, #17
 8000720:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x01;
 8000722:	2301      	movs	r3, #1
 8000724:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x09;
 8000726:	2309      	movs	r3, #9
 8000728:	733b      	strb	r3, [r7, #12]
	params[13]= 0x05;
 800072a:	2305      	movs	r3, #5
 800072c:	737b      	strb	r3, [r7, #13]
	params[14]= 0x04;
 800072e:	2304      	movs	r3, #4
 8000730:	73bb      	strb	r3, [r7, #14]
	LCD_Write_Data(params, 15);
 8000732:	463b      	mov	r3, r7
 8000734:	210f      	movs	r1, #15
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f8ae 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_NGAMMA);
 800073c:	20e1      	movs	r0, #225	@ 0xe1
 800073e:	f000 f869 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	703b      	strb	r3, [r7, #0]
	params[1]= 0x18;
 8000746:	2318      	movs	r3, #24
 8000748:	707b      	strb	r3, [r7, #1]
	params[2]= 0x1D;
 800074a:	231d      	movs	r3, #29
 800074c:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x02;
 800074e:	2302      	movs	r3, #2
 8000750:	70fb      	strb	r3, [r7, #3]
	params[4]= 0x0F;
 8000752:	230f      	movs	r3, #15
 8000754:	713b      	strb	r3, [r7, #4]
	params[5]= 0x04;
 8000756:	2304      	movs	r3, #4
 8000758:	717b      	strb	r3, [r7, #5]
	params[6]= 0x36;
 800075a:	2336      	movs	r3, #54	@ 0x36
 800075c:	71bb      	strb	r3, [r7, #6]
	params[7]= 0x13;
 800075e:	2313      	movs	r3, #19
 8000760:	71fb      	strb	r3, [r7, #7]
	params[8]= 0x4C;
 8000762:	234c      	movs	r3, #76	@ 0x4c
 8000764:	723b      	strb	r3, [r7, #8]
	params[9]= 0x07;
 8000766:	2307      	movs	r3, #7
 8000768:	727b      	strb	r3, [r7, #9]
	params[10]= 0x13;
 800076a:	2313      	movs	r3, #19
 800076c:	72bb      	strb	r3, [r7, #10]
	params[11]= 0x0F;
 800076e:	230f      	movs	r3, #15
 8000770:	72fb      	strb	r3, [r7, #11]
	params[12]= 0x2E;
 8000772:	232e      	movs	r3, #46	@ 0x2e
 8000774:	733b      	strb	r3, [r7, #12]
	params[13]= 0x2F;
 8000776:	232f      	movs	r3, #47	@ 0x2f
 8000778:	737b      	strb	r3, [r7, #13]
	params[14]= 0x05;
 800077a:	2305      	movs	r3, #5
 800077c:	73bb      	strb	r3, [r7, #14]
	LCD_Write_Data(params, 15);
 800077e:	463b      	mov	r3, r7
 8000780:	210f      	movs	r1, #15
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f888 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_RASET); //page address set
 8000788:	202b      	movs	r0, #43	@ 0x2b
 800078a:	f000 f843 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	707b      	strb	r3, [r7, #1]
	params[2]= 0x00;
 8000796:	2300      	movs	r3, #0
 8000798:	70bb      	strb	r3, [r7, #2]
	params[3]= 0xf0; //240 rows = 0xf0
 800079a:	23f0      	movs	r3, #240	@ 0xf0
 800079c:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 800079e:	463b      	mov	r3, r7
 80007a0:	2104      	movs	r1, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f878 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_CASET);
 80007a8:	202a      	movs	r0, #42	@ 0x2a
 80007aa:	f000 f833 	bl	8000814 <LCD_Write_Cmd>
	params[0]= 0x00;
 80007ae:	2300      	movs	r3, #0
 80007b0:	703b      	strb	r3, [r7, #0]
	params[1]= 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	707b      	strb	r3, [r7, #1]
	params[2]= 0x01;
 80007b6:	2301      	movs	r3, #1
 80007b8:	70bb      	strb	r3, [r7, #2]
	params[3]= 0x40; //320 columns = 0x140
 80007ba:	2340      	movs	r3, #64	@ 0x40
 80007bc:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 80007be:	463b      	mov	r3, r7
 80007c0:	2104      	movs	r1, #4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f868 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_RGB_INTERFACE);
 80007c8:	20b0      	movs	r0, #176	@ 0xb0
 80007ca:	f000 f823 	bl	8000814 <LCD_Write_Cmd>
	params[0] = 0xC2; //Data is fetched during falling edge of DOTCLK
 80007ce:	23c2      	movs	r3, #194	@ 0xc2
 80007d0:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80007d2:	463b      	mov	r3, r7
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f85e 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_INTERFACE);
 80007dc:	20f6      	movs	r0, #246	@ 0xf6
 80007de:	f000 f819 	bl	8000814 <LCD_Write_Cmd>
	params[0] = 0x00;
 80007e2:	2300      	movs	r3, #0
 80007e4:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 80007e6:	2300      	movs	r3, #0
 80007e8:	707b      	strb	r3, [r7, #1]
	params[2] = 0x06;
 80007ea:	2306      	movs	r3, #6
 80007ec:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 80007ee:	463b      	mov	r3, r7
 80007f0:	2103      	movs	r1, #3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f850 	bl	8000898 <LCD_Write_Data>

	LCD_Write_Cmd(ILI9341_SLEEP_OUT); //Exit Sleep
 80007f8:	2011      	movs	r0, #17
 80007fa:	f000 f80b 	bl	8000814 <LCD_Write_Cmd>
	delay_50ms();
 80007fe:	f7ff fe6d 	bl	80004dc <delay_50ms>
	delay_50ms();
 8000802:	f7ff fe6b 	bl	80004dc <delay_50ms>
	LCD_Write_Cmd(ILI9341_DISPLAY_ON); //display on
 8000806:	2029      	movs	r0, #41	@ 0x29
 8000808:	f000 f804 	bl	8000814 <LCD_Write_Cmd>


}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <LCD_Write_Cmd>:
void LCD_Write_Cmd(uint8_t cmd)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef* pSPI = SPI;
 800081e:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <LCD_Write_Cmd+0x78>)
 8000820:	60fb      	str	r3, [r7, #12]
	LCD_CSX_LOW(); //To start progress about send cmd
 8000822:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <LCD_Write_Cmd+0x7c>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a1a      	ldr	r2, [pc, #104]	@ (8000890 <LCD_Write_Cmd+0x7c>)
 8000828:	f023 0304 	bic.w	r3, r3, #4
 800082c:	6153      	str	r3, [r2, #20]
	LCD_DCX_LOW(); //DCX Low for cmd
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <LCD_Write_Cmd+0x80>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a18      	ldr	r2, [pc, #96]	@ (8000894 <LCD_Write_Cmd+0x80>)
 8000834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000838:	6153      	str	r3, [r2, #20]
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos)); //Check buffer was empty
 800083a:	bf00      	nop
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f9      	beq.n	800083c <LCD_Write_Cmd+0x28>
	REG_WRITE(pSPI->DR,cmd);
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	60da      	str	r2, [r3, #12]
	while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos)); //wait for send all cmd,BSY so empty
 800084e:	bf00      	nop
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f9      	bne.n	8000850 <LCD_Write_Cmd+0x3c>
	while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos)); //Check buffer was empty
 800085c:	bf00      	nop
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0f9      	beq.n	800085e <LCD_Write_Cmd+0x4a>
	LCD_DCX_HIGH(); //To start progress about send data
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <LCD_Write_Cmd+0x80>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a09      	ldr	r2, [pc, #36]	@ (8000894 <LCD_Write_Cmd+0x80>)
 8000870:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000874:	6153      	str	r3, [r2, #20]
	LCD_CSX_HIGH(); //Ending progress about send cmd
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <LCD_Write_Cmd+0x7c>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a05      	ldr	r2, [pc, #20]	@ (8000890 <LCD_Write_Cmd+0x7c>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6153      	str	r3, [r2, #20]
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40015000 	.word	0x40015000
 8000890:	40020800 	.word	0x40020800
 8000894:	40020c00 	.word	0x40020c00

08000898 <LCD_Write_Data>:
void LCD_Write_Data(uint8_t* buffer, uint32_t len)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	SPI_TypeDef* pSPI = SPI;
 80008a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <LCD_Write_Data+0x80>)
 80008a4:	60bb      	str	r3, [r7, #8]
	for(uint32_t i=0;i<len;i++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e02a      	b.n	8000902 <LCD_Write_Data+0x6a>
	{
		LCD_CSX_LOW(); //CSX Low for cmd
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <LCD_Write_Data+0x84>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <LCD_Write_Data+0x84>)
 80008b2:	f023 0304 	bic.w	r3, r3, #4
 80008b6:	6153      	str	r3, [r2, #20]
		while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos)); //Check buffer was empty
 80008b8:	bf00      	nop
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f9      	beq.n	80008ba <LCD_Write_Data+0x22>
		REG_WRITE(pSPI->DR,buffer[i]);
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60da      	str	r2, [r3, #12]
		while(!REG_READ_BIT(pSPI->SR,SPI_SR_TXE_Pos)); //Check buffer was empty
 80008d4:	bf00      	nop
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <LCD_Write_Data+0x3e>
		while(REG_READ_BIT(pSPI->SR,SPI_SR_BSY_Pos)); //wait for send all cmd,BSY so empty
 80008e2:	bf00      	nop
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f9      	bne.n	80008e4 <LCD_Write_Data+0x4c>
		LCD_CSX_HIGH(); //Ending progress about send cmd
 80008f0:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <LCD_Write_Data+0x84>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a09      	ldr	r2, [pc, #36]	@ (800091c <LCD_Write_Data+0x84>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6153      	str	r3, [r2, #20]
	for(uint32_t i=0;i<len;i++)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d3d0      	bcc.n	80008ac <LCD_Write_Data+0x14>
	}
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40015000 	.word	0x40015000
 800091c:	40020800 	.word	0x40020800

08000920 <main>:
#include "ili9341_reg.h"
void SystemClock_Setup(void);
void LTDC_Pin_Init(void);
void LIDC_Init(void);
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	SystemClock_Setup();
 8000924:	f000 f99e 	bl	8000c64 <SystemClock_Setup>
	LTDC_Pin_Init();
 8000928:	f000 f806 	bl	8000938 <LTDC_Pin_Init>
	LTDC_Init();
 800092c:	f000 f8fc 	bl	8000b28 <LTDC_Init>
	BSP_LCD_Init();
 8000930:	f7ff fc5c 	bl	80001ec <BSP_LCD_Init>
    /* Loop forever */
	for(;;);
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <main+0x14>

08000938 <LTDC_Pin_Init>:
}
void LTDC_Pin_Init(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
	//Enable the periherals clock for GPIO Port involved in LTDC interface
	REG_SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN_Pos);
 800093e:	4b76      	ldr	r3, [pc, #472]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a75      	ldr	r2, [pc, #468]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
	REG_SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOBEN_Pos);
 800094a:	4b73      	ldr	r3, [pc, #460]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a72      	ldr	r2, [pc, #456]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
	REG_SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOCEN_Pos);
 8000956:	4b70      	ldr	r3, [pc, #448]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a6f      	ldr	r2, [pc, #444]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
	REG_SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIODEN_Pos);
 8000962:	4b6d      	ldr	r3, [pc, #436]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a6c      	ldr	r2, [pc, #432]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
	REG_SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOGEN_Pos);
 800096e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a69      	ldr	r2, [pc, #420]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
	REG_SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOFEN_Pos);
 800097a:	4b67      	ldr	r3, [pc, #412]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a66      	ldr	r2, [pc, #408]	@ (8000b18 <LTDC_Pin_Init+0x1e0>)
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set configuration about alternate function
	for(int i =0;i<total_ltdc_pins;i++)
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e0b8      	b.n	8000afe <LTDC_Pin_Init+0x1c6>
	{
		REG_SET_VAL(ltdc_io_ports[i]->MODER,2U,0x3U,(ltdc_pins[i]*2U));
 800098c:	4a63      	ldr	r2, [pc, #396]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000994:	6819      	ldr	r1, [r3, #0]
 8000996:	4a62      	ldr	r2, [pc, #392]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	485c      	ldr	r0, [pc, #368]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80009b0:	400a      	ands	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	4a59      	ldr	r2, [pc, #356]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	6819      	ldr	r1, [r3, #0]
 80009be:	4a58      	ldr	r2, [pc, #352]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	2202      	movs	r2, #2
 80009ca:	409a      	lsls	r2, r3
 80009cc:	4853      	ldr	r0, [pc, #332]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	601a      	str	r2, [r3, #0]
		REG_CLR_BIT(ltdc_io_ports[i]->OTYPER,ltdc_pins[i]);
 80009d8:	4a50      	ldr	r2, [pc, #320]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e0:	6859      	ldr	r1, [r3, #4]
 80009e2:	4a4f      	ldr	r2, [pc, #316]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	2301      	movs	r3, #1
 80009ee:	4093      	lsls	r3, r2
 80009f0:	43da      	mvns	r2, r3
 80009f2:	484a      	ldr	r0, [pc, #296]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80009fa:	400a      	ands	r2, r1
 80009fc:	605a      	str	r2, [r3, #4]
		REG_SET_VAL(ltdc_io_ports[i]->OSPEEDR,2U,0x3U,(ltdc_pins[i]*2U));
 80009fe:	4a47      	ldr	r2, [pc, #284]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	6899      	ldr	r1, [r3, #8]
 8000a08:	4a45      	ldr	r2, [pc, #276]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43da      	mvns	r2, r3
 8000a1a:	4840      	ldr	r0, [pc, #256]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a22:	400a      	ands	r2, r1
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	4a3d      	ldr	r2, [pc, #244]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	6899      	ldr	r1, [r3, #8]
 8000a30:	4a3b      	ldr	r2, [pc, #236]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	4837      	ldr	r0, [pc, #220]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	609a      	str	r2, [r3, #8]
		if(ltdc_pins[i]<8)
 8000a4a:	4a35      	ldr	r2, [pc, #212]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	d826      	bhi.n	8000aa4 <LTDC_Pin_Init+0x16c>
		{
			REG_SET_VAL(ltdc_io_ports[i]->AFR[0],14U,0xFU,(ltdc_pins[i]*4U));
 8000a56:	4a31      	ldr	r2, [pc, #196]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5e:	6a19      	ldr	r1, [r3, #32]
 8000a60:	4a2f      	ldr	r2, [pc, #188]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43da      	mvns	r2, r3
 8000a72:	482a      	ldr	r0, [pc, #168]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a7a:	400a      	ands	r2, r1
 8000a7c:	621a      	str	r2, [r3, #32]
 8000a7e:	4a27      	ldr	r2, [pc, #156]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a86:	6a19      	ldr	r1, [r3, #32]
 8000a88:	4a25      	ldr	r2, [pc, #148]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	220e      	movs	r2, #14
 8000a94:	409a      	lsls	r2, r3
 8000a96:	4821      	ldr	r0, [pc, #132]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	621a      	str	r2, [r3, #32]
 8000aa2:	e029      	b.n	8000af8 <LTDC_Pin_Init+0x1c0>
		}
		else
		{
			REG_SET_VAL(ltdc_io_ports[i]->AFR[1],14U,0xFU,((ltdc_pins[i]%8)*4U));
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000aae:	4a1c      	ldr	r2, [pc, #112]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	220f      	movs	r2, #15
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	4815      	ldr	r0, [pc, #84]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000acc:	400a      	ands	r2, r1
 8000ace:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ad0:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000ada:	4a11      	ldr	r2, [pc, #68]	@ (8000b20 <LTDC_Pin_Init+0x1e8>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	220e      	movs	r2, #14
 8000aea:	409a      	lsls	r2, r3
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <LTDC_Pin_Init+0x1e4>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	625a      	str	r2, [r3, #36]	@ 0x24
	for(int i =0;i<total_ltdc_pins;i++)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3301      	adds	r3, #1
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <LTDC_Pin_Init+0x1ec>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4293      	cmp	r3, r2
 8000b08:	f6ff af40 	blt.w	800098c <LTDC_Pin_Init+0x54>
		}
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	08000ecc 	.word	0x08000ecc
 8000b24:	08000ee2 	.word	0x08000ee2

08000b28 <LTDC_Init>:
void LTDC_Init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
	LTDC_TypeDef* pLTDC =LTDC;
 8000b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c5c <LTDC_Init+0x134>)
 8000b30:	60fb      	str	r3, [r7, #12]
	REG_SET_BIT(RCC->APB2ENR,RCC_APB2ENR_LTDCEN_Pos);
 8000b32:	4b4b      	ldr	r3, [pc, #300]	@ (8000c60 <LTDC_Init+0x138>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a4a      	ldr	r2, [pc, #296]	@ (8000c60 <LTDC_Init+0x138>)
 8000b38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
	//Cau hinh ma hoa thoi gian dong bo hoa theo chieu ngang
	REG_SET_VAL(pLTDC->SSCR,(BSP_LCD_HSW-1),0xFFFU,LTDC_SSCR_HSW_Pos);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8000b46:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	6093      	str	r3, [r2, #8]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f443 2210 	orr.w	r2, r3, #589824	@ 0x90000
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pLTDC->BPCR,(BSP_LCD_HSW+BSP_LCD_HBP-1),0xFFFU,LTDC_BPCR_AHBP_Pos);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8000b62:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	60d3      	str	r3, [r2, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	f443 12e8 	orr.w	r2, r3, #1900544	@ 0x1d0000
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	60da      	str	r2, [r3, #12]
	REG_SET_VAL(pLTDC->AWCR,(BSP_LCD_HSW+BSP_LCD_HBP+BSP_LCD_ACTIVE_WIDTH_LANDSCAPE-1),0xFFFU,LTDC_AWCR_AAW_Pos);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8000b7e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	6113      	str	r3, [r2, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	f043 73ae 	orr.w	r3, r3, #22806528	@ 0x15c0000
 8000b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	6113      	str	r3, [r2, #16]
	uint32_t total_width = BSP_LCD_HSW+BSP_LCD_HBP+BSP_LCD_ACTIVE_WIDTH_LANDSCAPE+BSP_LCD_HFP-1;
 8000b96:	f240 1367 	movw	r3, #359	@ 0x167
 8000b9a:	60bb      	str	r3, [r7, #8]
	REG_SET_VAL(pLTDC->TWCR,total_width,0xFFFU,LTDC_TWCR_TOTALW_Pos);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8000ba4:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	6153      	str	r3, [r2, #20]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	615a      	str	r2, [r3, #20]
	//Cau hinh ma hoa thoi gian dong bo hoa theo chieu doc
	REG_SET_VAL(pLTDC->SSCR,(BSP_LCD_VSW-1),0x7FFU,LTDC_SSCR_VSH_Pos);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000bc2:	f023 0307 	bic.w	r3, r3, #7
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	6093      	str	r3, [r2, #8]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pLTDC->BPCR,(BSP_LCD_VSW+BSP_LCD_VBP-1),0x7FFU,LTDC_BPCR_AVBP_Pos);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000bde:	f023 0307 	bic.w	r3, r3, #7
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	60d3      	str	r3, [r2, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f043 0203 	orr.w	r2, r3, #3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	60da      	str	r2, [r3, #12]
	REG_SET_VAL(pLTDC->AWCR,(BSP_LCD_VSW+BSP_LCD_VBP+BSP_LCD_ACTIVE_HEIGHT_LANDSCAPE-1),0x7FFU,LTDC_AWCR_AAH_Pos);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000bfa:	f023 0307 	bic.w	r3, r3, #7
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	6113      	str	r3, [r2, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	f043 02f3 	orr.w	r2, r3, #243	@ 0xf3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
	uint32_t total_height = BSP_LCD_VSW+BSP_LCD_VBP+BSP_LCD_ACTIVE_HEIGHT_LANDSCAPE+BSP_LCD_VFP-1;
 8000c0e:	23f7      	movs	r3, #247	@ 0xf7
 8000c10:	607b      	str	r3, [r7, #4]
	REG_SET_VAL(pLTDC->TWCR,total_height,0x7FFU,LTDC_TWCR_TOTALH_Pos);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000c1a:	f023 0307 	bic.w	r3, r3, #7
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	615a      	str	r2, [r3, #20]
	//Cau hinh nen mau(mau do)
	REG_SET_VAL(pLTDC->BCCR,0xFF0000U,0xFFFFFFU,LTDC_BCCR_BCBLUE_Pos);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c32:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	62da      	str	r2, [r3, #44]	@ 0x2c
	//Dinh dang mac dinh cho hsycn, vsync, ltdc_clk,DE
	//TODO
	//Enable ngoai vi LTDC
	REG_SET_BIT(pLTDC->GCR,LTDC_GCR_LTDCEN_Pos);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f043 0201 	orr.w	r2, r3, #1
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	619a      	str	r2, [r3, #24]
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40016800 	.word	0x40016800
 8000c60:	40023800 	.word	0x40023800

08000c64 <SystemClock_Setup>:

void SystemClock_Setup(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 8000c6a:	4b68      	ldr	r3, [pc, #416]	@ (8000e0c <SystemClock_Setup+0x1a8>)
 8000c6c:	60fb      	str	r3, [r7, #12]
	FLASH_TypeDef *pFlash = FLASH;
 8000c6e:	4b68      	ldr	r3, [pc, #416]	@ (8000e10 <SystemClock_Setup+0x1ac>)
 8000c70:	60bb      	str	r3, [r7, #8]
	PWR_TypeDef *pPWR = PWR;
 8000c72:	4b68      	ldr	r3, [pc, #416]	@ (8000e14 <SystemClock_Setup+0x1b0>)
 8000c74:	607b      	str	r3, [r7, #4]
	//1. Programing Flash wait states
	REG_SET_VAL(pFlash->ACR,0x5U,0xFU,FLASH_ACR_LATENCY_Pos);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 020f 	bic.w	r2, r3, #15
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f043 0205 	orr.w	r2, r3, #5
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	601a      	str	r2, [r3, #0]
	//2. Over Drive Setting
	REG_SET_BIT(pRCC->APB1ENR,RCC_APB1ENR_PWREN_Pos); //Enable clock for PWR register access
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	641a      	str	r2, [r3, #64]	@ 0x40
	REG_SET_VAL(pPWR->CR,0x3,0x3,PWR_CR_VOS_Pos); //VOS = 0B11
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f443 4240 	orr.w	r2, r3, #49152	@ 0xc000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pPWR->CR,PWR_CR_ODEN_Pos); // Activate over drive mode
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	601a      	str	r2, [r3, #0]
	while(!REG_READ_BIT(pPWR->CSR,PWR_CSR_ODRDY_Pos)); //wait for overdrive ready
 8000cbe:	bf00      	nop
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f9      	beq.n	8000cc0 <SystemClock_Setup+0x5c>
	REG_SET_BIT(pPWR->CR,PWR_CR_ODSWEN_Pos);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	601a      	str	r2, [r3, #0]
	//3. Setting up main PPL
	//PLL_M
	REG_SET_VAL(pRCC->PLLCFGR,0x8U,0x3FU,0U); //PLLM
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f043 0208 	orr.w	r2, r3, #8
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pRCC->PLLCFGR,180U,0x1FFU,6U);//PLLN
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	6053      	str	r3, [r2, #4]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f443 5234 	orr.w	r2, r3, #11520	@ 0x2d00
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pRCC->PLLCFGR,0x00U,0x3U,16U);//PLLP
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	605a      	str	r2, [r3, #4]
	//4. Setting up LCD_CLK using PLLSAI block
	REG_SET_VAL(pRCC->PLLSAICFGR,50U,0x1FFU,RCC_PLLSAICFGR_PLLSAIN_Pos);//PLLSAI_N
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	f443 6248 	orr.w	r2, r3, #3200	@ 0xc80
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	REG_SET_VAL(pRCC->PLLSAICFGR,0x02U,0x7U,RCC_PLLSAICFGR_PLLSAIR_Pos);//PLLSAI_R
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	//LCD_CLK = 6.25MHz
	REG_SET_VAL(pRCC->DCKCFGR,0x08U,0x3U,RCC_DCKCFGR_PLLSAIDIVR_Pos);//DIV
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d7a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	//5. Setting up AHB and APBx clocks
	REG_SET_VAL(pRCC->CFGR,0U,0xFU,RCC_CFGR_HPRE_Pos); //AHB prescaler
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pRCC->CFGR,0x5U,0x7U,RCC_CFGR_PPRE1_Pos); //APB1 prescaler
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f443 52a0 	orr.w	r2, r3, #5120	@ 0x1400
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pRCC->CFGR,0x4U,0x7U,RCC_CFGR_PPRE2_Pos); //APB2 prescaler
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	609a      	str	r2, [r3, #8]
	//6. Turn on PLL and wait for PLLCLK ready
	REG_SET_BIT(pRCC->CR,RCC_CR_PLLON_Pos);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	601a      	str	r2, [r3, #0]
	while(!REG_READ_BIT(pRCC->CR,RCC_CR_PLLRDY_Pos));
 8000dd4:	bf00      	nop
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f9      	beq.n	8000dd6 <SystemClock_Setup+0x172>
	//7. Switch PLLCLK as SYSCLK
	REG_SET_VAL(pRCC->CFGR,0x2U,0x3U,RCC_CFGR_SW_Pos);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f023 0203 	bic.w	r2, r3, #3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f043 0202 	orr.w	r2, r3, #2
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	609a      	str	r2, [r3, #8]
	while(!REG_READ_VAL(pRCC->CFGR,0x3U,RCC_CFGR_SWS_Pos) == 0x2U);
 8000dfa:	bf00      	nop
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	689b      	ldr	r3, [r3, #8]

}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40023c00 	.word	0x40023c00
 8000e14:	40007000 	.word	0x40007000

08000e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopForever+0xe>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopForever+0x16>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e46:	f000 f811 	bl	8000e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff fd69 	bl	8000920 <main>

08000e4e <LoopForever>:

LoopForever:
  b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   r0, =_estack
 8000e50:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000e5c:	08000eec 	.word	0x08000eec
  ldr r2, =_sbss
 8000e60:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000e64:	20000074 	.word	0x20000074

08000e68 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <__libc_init_array>:
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ea4 <__libc_init_array+0x38>)
 8000e70:	4c0d      	ldr	r4, [pc, #52]	@ (8000ea8 <__libc_init_array+0x3c>)
 8000e72:	1b64      	subs	r4, r4, r5
 8000e74:	10a4      	asrs	r4, r4, #2
 8000e76:	2600      	movs	r6, #0
 8000e78:	42a6      	cmp	r6, r4
 8000e7a:	d109      	bne.n	8000e90 <__libc_init_array+0x24>
 8000e7c:	4d0b      	ldr	r5, [pc, #44]	@ (8000eac <__libc_init_array+0x40>)
 8000e7e:	4c0c      	ldr	r4, [pc, #48]	@ (8000eb0 <__libc_init_array+0x44>)
 8000e80:	f000 f818 	bl	8000eb4 <_init>
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	10a4      	asrs	r4, r4, #2
 8000e88:	2600      	movs	r6, #0
 8000e8a:	42a6      	cmp	r6, r4
 8000e8c:	d105      	bne.n	8000e9a <__libc_init_array+0x2e>
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}
 8000e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e94:	4798      	blx	r3
 8000e96:	3601      	adds	r6, #1
 8000e98:	e7ee      	b.n	8000e78 <__libc_init_array+0xc>
 8000e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e9e:	4798      	blx	r3
 8000ea0:	3601      	adds	r6, #1
 8000ea2:	e7f2      	b.n	8000e8a <__libc_init_array+0x1e>
 8000ea4:	08000ee4 	.word	0x08000ee4
 8000ea8:	08000ee4 	.word	0x08000ee4
 8000eac:	08000ee4 	.word	0x08000ee4
 8000eb0:	08000ee8 	.word	0x08000ee8

08000eb4 <_init>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	bf00      	nop
 8000eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eba:	bc08      	pop	{r3}
 8000ebc:	469e      	mov	lr, r3
 8000ebe:	4770      	bx	lr

08000ec0 <_fini>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	bf00      	nop
 8000ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec6:	bc08      	pop	{r3}
 8000ec8:	469e      	mov	lr, r3
 8000eca:	4770      	bx	lr
